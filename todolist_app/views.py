from re import A, U
from django.db.models.fields.related import ForeignKey
from django.shortcuts import render, redirect
from django.http import HttpResponse
from todolist_app.models import Tasklist,edit_page,gst_master,emp,work,client
from todolist_app.forms import TaskForm,TaskForm2
from django.contrib import messages
from taskmate2.settings import EMAIL_HOST_USER
from django.core.mail import send_mail
from django.conf import settings
from django.contrib.auth.models import User
import csv
import requests
import urllib
from urllib.request import HTTPBasicAuthHandler, urlopen
from todolist_app.functions import handle_uploaded_file  
from django.core.files.storage import FileSystemStorage
import datetime
from django.contrib.auth.decorators import login_required
#Report Generation
from cgitb import html
from re import A, U
from urllib import response
from django.db.models.fields.related import ForeignKey
from django.shortcuts import render, redirect
from django.http import HttpResponse
from todolist_app.models import Tasklist,edit_page,gst_master,emp,work,client,list
from todolist_app.forms import TaskForm,TaskForm2
from django.contrib import messages
from taskmate2.settings import EMAIL_HOST_USER
from django.core.mail import send_mail
from django.conf import settings
from django.contrib.auth.models import User
import csv
import requests
import urllib
from urllib.request import HTTPBasicAuthHandler, urlopen
from todolist_app.functions import handle_uploaded_file
from django.core.files.storage import FileSystemStorage
import datetime
#Report Generation
import xlwt
from django.http import HttpResponse
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.core.mail import EmailMessage
from io import BytesIO
from django.template.loader import get_template
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.template import Context
from .models import work
from django.core.mail import EmailMultiAlternatives
from django.template import Context
from openpyxl import Workbook
from zipfile import ZipFile
import zipfile
from openpyxl.styles import PatternFill
from openpyxl.styles import Font, Fill#Connect styles for text
from openpyxl.styles import colors#Connect colors for text and cells
from openpyxl.styles import NamedStyle
# For Creating Xlsx File
from django.http import HttpResponse
from django.contrib.auth.models import User
import xlwt 
# For Sending email with html tag
from django.core import mail
from django.template.loader import render_to_string
from django.utils.html import strip_tags
# Style xlsx 
from datetime import datetime
from pytz import utc

def pdf():
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data
    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
  
    borders = xlwt.Borders()
    borders.left = xlwt.Borders.THICK
    borders.right = xlwt.Borders.THICK
    borders.top = xlwt.Borders.THICK
    borders.bottom = xlwt.Borders.THICK
    font_style.borders = borders

    ws.col(0).width = 6000
    ws.col(1).width = 5000
    ws.col(2).width = 5000
    ws.col(3).width = 5000
    ws.col(4).width = 25000
    ws.row(0).height = 500

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = xlwt.Style.colour_map['sky_blue']
    font_style.pattern = pattern

    for col_num in range(len(columns)):  
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 
    
    font_style = xlwt.XFStyle()    
    font_style = xlwt.easyxf(num_format_str='YYYY/MM/DD HH:MM AM/PM')

    # Sheet body, remaining rows
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = 0x17
    font_style.pattern = pattern

    #current_datetime = datetime.now()
    today = date.today()
    #yesterday = today - timedelta(days = 1)

    rows = work.objects.filter(date=today).values_list('emp_name', 'date', 'work_from', 'work_to','description').all()
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num],font_style)

    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Employee-Daily Work Report'
    email.body = 'This Report is Generated by daily basis'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['accounts@ramajayam.in','suryariya45@gmail.com','pavithra@ramajayam.in']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()

@login_required
def pdf1(request):
    all1 = work.objects.filter(emp_name = "Kalai").order_by('-date','-work_from')
    return render(request,'int1.html',{'all1':all1})
    
@login_required
def pdf2(request):
    all2 = work.objects.filter(emp_name = "Akash").order_by('-date','-work_from')
    return render(request,'int2.html',{'all2':all2})

@login_required
def pdf3(request):
    all3 = work.objects.filter(emp_name = "Hithesh").order_by('-date','-work_from')
    return render(request,'int3.html',{'all3':all3})

@login_required
def pdf4(request):
    all4 = work.objects.filter(emp_name = "Arul Murugan").order_by('-date','-work_from')
    return render(request,'int4.html',{'all4':all4})

@login_required
def pdf5(request):
    all5 = work.objects.filter(emp_name = "Surya").order_by('-date','-work_from')
    return render(request,'int5.html',{'all5':all5})

"""
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
  
    borders = xlwt.Borders()
    borders.left = xlwt.Borders.THICK
    borders.right = xlwt.Borders.THICK
    borders.top = xlwt.Borders.THICK
    borders.bottom = xlwt.Borders.THICK
    font_style.borders = borders

    ws.col(0).width = 6000
    ws.col(1).width = 5000
    ws.col(2).width = 5000
    ws.col(3).width = 5000
    ws.col(4).width = 25000
    ws.row(0).height = 500

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    font_style = xlwt.XFStyle()    
    font_style = xlwt.easyxf(num_format_str='YYYY/MM/DD HH:MM AM/PM')
    # Sheet body, remaining rows
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = 0x17
    font_style.pattern = pattern

    rows = work.objects.filter(emp_name='Surya').filter(date__range=["2022-03-17", "2022-04-18"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Surya-Daily Work Report'
    email.body = 'This Report is Generated by daily basis'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()

    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
  
    borders = xlwt.Borders()
    borders.left = xlwt.Borders.THICK
    borders.right = xlwt.Borders.THICK
    borders.top = xlwt.Borders.THICK
    borders.bottom = xlwt.Borders.THICK
    font_style.borders = borders

    ws.col(0).width = 6000
    ws.col(1).width = 5000
    ws.col(2).width = 5000
    ws.col(3).width = 5000
    ws.col(4).width = 25000
    ws.row(0).height = 500

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = xlwt.Style.colour_map['pale_blue']
    font_style.pattern = pattern

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    font_style = xlwt.XFStyle()    
    font_style = xlwt.easyxf(num_format_str='YYYY/MM/DD HH:MM AM/PM')
    # Sheet body, remaining rows
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = 0x17
    font_style.pattern = pattern

    rows = work.objects.filter(emp_name='Akash').filter(date__range=["2022-04-17", "2022-04-18"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Akash-Daily Work Report'
    email.body = 'This Report is Generated by daily basis'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()

    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
  
    borders = xlwt.Borders()
    borders.left = xlwt.Borders.THICK
    borders.right = xlwt.Borders.THICK
    borders.top = xlwt.Borders.THICK
    borders.bottom = xlwt.Borders.THICK
    font_style.borders = borders

    ws.col(0).width = 6000
    ws.col(1).width = 5000
    ws.col(2).width = 5000
    ws.col(3).width = 5000
    ws.col(4).width = 25000
    ws.row(0).height = 500

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    font_style = xlwt.XFStyle()    
    font_style = xlwt.easyxf(num_format_str='YYYY/MM/DD HH:MM AM/PM')
    # Sheet body, remaining rows
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = 0x17
    font_style.pattern = pattern

    rows = work.objects.filter(emp_name='Hithesh').filter(date__range=["2022-04-17", "2022-04-18"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Hithesh-Daily Work Report'
    email.body = 'This Report is Generated by daily basis'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()

    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
  
    borders = xlwt.Borders()
    borders.left = xlwt.Borders.THICK
    borders.right = xlwt.Borders.THICK
    borders.top = xlwt.Borders.THICK
    borders.bottom = xlwt.Borders.THICK
    font_style.borders = borders

    ws.col(0).width = 6000
    ws.col(1).width = 5000
    ws.col(2).width = 5000
    ws.col(3).width = 5000
    ws.col(4).width = 25000
    ws.row(0).height = 500

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    font_style = xlwt.XFStyle()    
    font_style = xlwt.easyxf(num_format_str='YYYY/MM/DD HH:MM AM/PM')
    # Sheet body, remaining rows
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = 0x17
    font_style.pattern = pattern

    rows = work.objects.filter(emp_name='Arul Murugan').filter(date__range=["2022-04-17", "2022-04-18"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Arul Murugan-Daily Work Report'
    email.body = 'This Report is Generated by daily basis'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()
    return response

    Work = work.objects.filter(emp_name = 'Kalai').filter(date__range=["2022-03-24", "2022-03-25"]).all()
    subject, from_email, to = 'hello', 'ramajayambot@gmail.com','suryariya45@gmail.com'
    text_content = 'This is an important message.'
    html_content = '<table><thead> <tr><th>EMPLOYEE</th><th>DATE</th><th>TIME FROM</th><th>TIME TO</th><th>WORK</th></tr></thead><tbody><tr><td> {% order.emp_name %} </td></table>'
    #html_content = ' <table><thead> <tr><th>EMPLOYEE</th><th>DATE</th><th>TIME FROM</th><th>TIME TO</th><th>WORK</th></tr></thead><tbody>{% for item in order %}<tr><td>{{ item.emp_name }}</td><td>{{ item.date }}</td><td>{{ item.work_from }}</td><td>{{ item.work_to }}</td><td>{{ item.description }}</td></tr>{% endfor %}</tbody></table>'
    msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
    msg.attach_alternative(html_content, "text/html")
    msg.send()
    context = {
            'order':Work,
        }
    return response(context)
    
        email = EmailMessage()
        Work = work.objects.filter(emp_name = 'Kalai').filter(date__range=["2022-03-24", "2022-03-25"]).all()
        email.subject = Work
        email.body = 'This is one week report of daily work'
        email.from_email = 'ramajayambot@gmail.com'
        email.to = ['suryariya45@gmail.com']
        email.send()
        context = {
            'order':Work,
        }
        return render(request, 'template.html',context)

def pdf2(request):
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
    
    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = xlwt.Style.colour_map['pale_blue']
    font_style.pattern = pattern

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    # Sheet body, remaining rows
    font_style = xlwt.XFStyle()

    rows = work.objects.filter(emp_name='Akash').filter(date__range=["2022-03-17", "2022-03-23"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    wb.save(response)
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Akash-Daily Work Report'
    email.body = 'This is one week report of daily work'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()
    return response

def pdf3(request):
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    # Sheet body, remaining rows
    font_style = xlwt.XFStyle()

    rows = work.objects.filter(emp_name='Hithesh').filter(date__range=["2022-03-17", "2022-03-23"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    wb.save(response)
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Hithesh-Daily Work Report'
    email.body = 'This is one week report of daily work'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()
    return response

def pdf4(request):
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    # Sheet body, remaining rows
    font_style = xlwt.XFStyle()

    rows = work.objects.filter(emp_name='Arul Murugan').filter(date__range=["2022-03-17", "2022-03-23"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    wb.save(response)
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Arul Murugan-Daily Work Report'
    email.body = 'This is one week report of daily work'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()
    return response

def pdf5(request):
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="users.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Users Data') # this will make a sheet named Users Data

    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME','DESCRIPTION' ]

    for col_num in range(len(columns)):
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 

    # Sheet body, remaining rows
    font_style = xlwt.XFStyle()

    rows = work.objects.filter(emp_name='Surya').filter(date__range=["2022-03-31", "2022-03-31"]).values_list('emp_name', 'date', 'work_from', 'work_to','description')
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num], font_style)
    wb.save(response)
    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'Surya-Daily Work Report'
    email.body = 'This is one week report of daily work'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['suryariya45@gmail.com']
    email.attach('users.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()
    return response

"""
@login_required
def search(request):
    if request.method == 'POST':
        search = request.POST['search']
        all_tasks = Tasklist.objects.all( task = search )
        all_tasks2 = Tasklist.objects.all()
        return render(request,'todolist.html',{'search':search,'all_tasks':all_tasks,'all_tasks2':all_tasks2})
    else:
        return redirect('/')

@login_required
def sss(request):
    if request.method == 'POST':
        all = client.objects.all()
        return render(request,'todolist.html',{'all':all})

@login_required
def todolist(request):
    if request.user.is_authenticated:
        if request.method == 'POST' and 'action' in request.POST:
            clientname = request.POST['clientname']
            task = request.POST['task']
            startdate = request.POST['startdate']
            enddate = request.POST['enddate']
            assignee = request.POST['assignee']
            status = request.POST['status']
            priority = request.POST['priority']
            newdata = Tasklist(task=task,clientname=clientname,assignee=assignee,startdate=startdate,enddate=enddate,status=status,priority=priority)
            newdata.save()

            task = Tasklist.objects.get(pk=newdata.pk)
            Client =  task.clientname
            Work = task.task
            Assignee = task.assignee

            if Assignee ==  ('Ramajayam'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
            
            elif Assignee ==  ('Hithesh'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to " + Assignee + ". Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508501532765&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=7904376087&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
            
            elif Assignee ==  ('Surya'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to " + Assignee + ". Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508501532765&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9962138673&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)

            elif Assignee ==  ('Arul Murugan'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to " + Assignee + ". Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508501532765&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9962138673&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Pavithra'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to " + Assignee + ". Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508501532765&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9600190835&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Kalai'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to " + Assignee + ". Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508501532765&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=7338758831&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)   

            elif Assignee ==  ('Akash'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to " + Assignee + ". Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508501532765&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=6379220399&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req) 
                
            else:
                print ("sms not sent")

            messages.success(request,("New Task Added Successfully!" ))
            #return redirect('email1', (newdata.pk))
            return  redirect('todolist')

        else:
                countarulpending = Tasklist.objects.filter(assignee = 'Arul Murugan').filter(status = 'Pending').count()
                countarulwip = Tasklist.objects.filter(assignee = 'Arul Murugan').filter(status = 'Work in Progress').count()
                countarulall = Tasklist.objects.filter(assignee = 'Arul Murugan').filter(fstatus = '0').count()

                countrampending = Tasklist.objects.filter(assignee = 'Ramajayam').filter(status = 'Pending').count()
                countramwip = Tasklist.objects.filter(assignee = 'Ramajayam').filter(status = 'Work in Progress').count()
                countramapp = Tasklist.objects.filter(status = 'Finished').filter(fstatus = 0).count()
                countramall = Tasklist.objects.filter(assignee = 'Ramajayam').filter(fstatus = '0').count()

                countpavithrapending = Tasklist.objects.filter(assignee = 'Pavithra').filter(status = 'Pending').count()
                countpavithrawip = Tasklist.objects.filter(assignee = 'Pavithra').filter(status = 'Work in Progress').count()
                countpavithraall = Tasklist.objects.filter(assignee = 'Pavithra').filter(fstatus = '0').count()

                countsuryapending = Tasklist.objects.filter(assignee = 'Surya').filter(status = 'Pending').count()
                countsuryawip = Tasklist.objects.filter(assignee = 'Surya').filter(status = 'Work in Progress').count()
                countsuryaall = Tasklist.objects.filter(assignee = 'Surya').filter(fstatus = '0').count()

                countakashpending = Tasklist.objects.filter(assignee = 'Akash').filter(status = 'Pending').count()
                countakashwip = Tasklist.objects.filter(assignee = 'Akash').filter(status = 'Work in Progress').count()
                countakashall = Tasklist.objects.filter(assignee = 'Akash').filter(fstatus = '0').count()

                counthitheshpending = Tasklist.objects.filter(assignee = 'Hithesh').filter(status = 'Pending').count()
                counthitheshwip = Tasklist.objects.filter(assignee = 'Hithesh').filter(status = 'Work in Progress').count()
                counthitheshall = Tasklist.objects.filter(assignee = 'Hithesh').filter(fstatus = '0').count()

                countkalaipending = Tasklist.objects.filter(assignee = 'Kalai').filter(status = 'Pending').count()
                countkalaiwip = Tasklist.objects.filter(assignee = 'Kalai').filter(status = 'Work in Progress').count()
                countkalaiall = Tasklist.objects.filter(assignee = 'Kalai').filter(fstatus = '0').count()
                #countkalaiapp = Tasklist.objects.filter(assignee = 'Kalai').count()

                all_tasks = Tasklist.objects.all()
                #print(count)
                #context2 = {'count': count}
                all = client.objects.all()
                all_tasks_sorted = Tasklist.objects.order_by('id')
                
                context = {
                    'all':all,
                    'all_tasks': all_tasks_sorted,
                    'countarulpending': countarulpending,
                    'countarulwip': countarulwip,
                    'countarulall': countarulall,

                    'countrampending': countrampending,
                    'countramwip': countramwip,
                    'countramapp': countramapp,
                    'countramall': countramall,

                    'countakashpending': countakashpending,
                    'countakashwip': countakashwip,
                    'countakashall': countakashall,

                    'counthitheshpending': counthitheshpending,
                    'counthitheshwip': counthitheshwip,
                    'counthitheshall': counthitheshall,

                    'countkalaipending': countkalaipending,
                    'countkalaiwip': countkalaiwip,
                    'countkalaiall': countkalaiall,
                    #'countkalaiapp': countkalaiapp,

                    'countpavithrapending': countpavithrapending,
                    'countpavithrawip': countpavithrawip,
                    'countpavithraall': countpavithraall,

                    'countsuryapending': countsuryapending,
                    'countsuryawip': countsuryawip,
                    'countsuryaall': countsuryaall,
                    #'countsuryaapp': countsuryaapp,
                }

                return render(request, 'todolist.html',context)
    else:
        return  render(request, 'registration/login.html')

@login_required
def todoemp(request):
    if request.user.is_authenticated:
        if request.method == 'POST' and 'action' in request.POST:

            data = request.POST.copy()
            form = TaskForm(request.POST or None)
            if form.is_valid():
                    newdata = form.save()
                            #messages.success(request,(newdata.pk))
            #Client_name = newdata.pk.get("Clientname")
            task = Tasklist.objects.get(pk=newdata.pk)
            Client =  task.clientname
            Work = task.task
            Assignee = task.assignee

            if Assignee ==  ('Ramajayam'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Arul Murugan'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9962138673&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Akash'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=6379220399&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Pavithra'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9600190835&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Hithesh'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=7904376087&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)
                
            elif Assignee ==  ('Kalai'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=7338758831&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)

            elif Assignee ==  ('Surya'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9345620789&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)    
                
            else:
                print ("sms not sent")

            messages.success(request,("New Task Added Successfully!" ))
            #return redirect('email1', (newdata.pk))
            return  redirect('todoemp')
        else:
            return render(request, 'todoemp.html')
    else:
        return  render(request, 'registration/login.html')

@login_required
def todolist1(request):

                all_tasks = Tasklist.objects.filter(assignee ='Arul Murugan').all()
                countarulpending = Tasklist.objects.filter(assignee = 'Arul Murugan').filter(status = 'Pending').count()
                countarulwip = Tasklist.objects.filter(assignee = 'Arul Murugan').filter(status = 'Work in Progress').count()
            
                context = {
                    'all_tasks': all_tasks,
                    'countarulpending': countarulpending,
                    'countarulwip': countarulwip,
                }
                return render(request, 'todolist1.html',context)

@login_required
def todolist2(request):

                all_tasks = Tasklist.objects.filter(assignee ='Ramajayam').all()
                countrampending = Tasklist.objects.filter(assignee = 'Ramajayam').filter(status = 'Pending').count()
                countramwip = Tasklist.objects.filter(assignee = 'Ramajayam').filter(status = 'Work in Progress').count()

                context = {
                    'all_tasks': all_tasks,
                    'countrampending': countrampending,
                    'countramwip': countramwip,
                }
                return render(request, 'todolist2.html',context)

@login_required
def add(request):
    if request.method == 'POST':
        name = request.POST['name']
        pan = request.POST['pan'] 
        Client = client(name=name,pan=pan)
        Client.save()
    return render (request,'add1.html')

@login_required
def todolist3(request):
    all_tasks = Tasklist.objects.filter(assignee ='Akash').all()
    countrampending = Tasklist.objects.filter(assignee = 'Akash').filter(status = 'Pending').count()
    countramwip = Tasklist.objects.filter(assignee = 'Akash').filter(status = 'Work in Progress').count()
    context = {
        'all_tasks': all_tasks,
        'countrampending': countrampending,
        'countramwip': countramwip,
    }
    return render(request, 'akashpage.html',context)

@login_required           
def todolist4(request):
    all_tasks = Tasklist.objects.filter(assignee ='Pavithra').all()
    countrampending = Tasklist.objects.filter(assignee = 'Pavithra').filter(status = 'Pending').count()
    countramwip = Tasklist.objects.filter(assignee = 'Pavithra').filter(status = 'Work in Progress').count()
    context = {
        'all_tasks': all_tasks,
        'countpavithrapending': countrampending,
        'countpavithrawip': countramwip,
    }
    return render(request, 'pavithrapage.html',context)

@login_required
def todolist5(request):
    all_tasks = Tasklist.objects.filter(assignee ='Hithesh').all()
    counthitheshpending = Tasklist.objects.filter(assignee = 'Hithesh').filter(status = 'Pending').count()
    counthitheshwip = Tasklist.objects.filter(assignee = 'Hithesh').filter(status = 'Work in Progress').count()
    context = {
        'all_tasks': all_tasks,
        'counthitheshpending': counthitheshpending,
        'counthitheshwip': counthitheshwip,
    }
    return render(request, 'Hitheshpage.html',context)
    
@login_required
def todolist6(request):
    all_tasks = Tasklist.objects.filter(assignee ='Kalai').all()
    countkalaipending = Tasklist.objects.filter(assignee = 'Kalai').filter(status = 'Pending').count()
    countkalaiwip = Tasklist.objects.filter(assignee = 'Kalai').filter(status = 'Work in Progress').count()
    context = {
        'all_tasks': all_tasks,
        'countkalaipending': countkalaipending,
        'countkalaiwip': countkalaiwip,
    }
    return render(request, 'kalaipage.html',context)

@login_required
def todolist7(request):
    all_tasks = Tasklist.objects.filter(assignee ='Surya').all()
    countsuryapending = Tasklist.objects.filter(assignee = 'Surya').filter(status = 'Pending').count()
    countsuryawip = Tasklist.objects.filter(assignee = 'Surya').filter(status = 'Work in Progress').count()
    context = {
        'all_tasks': all_tasks,
        'countsuryapending': countsuryapending,
        'countsuryawip': countsuryawip,
    }
    return render(request, 'suryapage.html',context)

@login_required
def file_management(request):
    if request.method == "POST":
        company_name = request.POST['company_name']
        file_name = request.POST['file_name']
        ay = request.POST['ay']
        status = request.POST['status']
        ok = list(company_name=company_name,file_name=file_name,ay=ay,status=status)  
        ok.save()
        return redirect('file_management')
        
    return render(request,'addcompany.html')

@login_required
def file_report(request):
    all = list.objects.all()
    return render(request,'file_list.html',{'all':all})

@login_required
def delete(request,pk):
    all=list.objects.get(pk=all.pk)
    all.delete()
    return render(request,'file_list.html',{'all':all})

@login_required
def attendance(request):
    if request.method == "POST":
        emp_name = request.POST['emp_name']
        date = request.POST['date']
        intime = request.POST['intime']
        outtime = request.POST['outtime']
        employee = emp(emp_name=emp_name,date=date,intime=intime,outtime=outtime)
        employee.save()
    return render(request,'report.html')

def pdff( ):
    response = HttpResponse(content_type='application/ms-excel')
    response['Content-Disposition'] = 'attachment; filename="Attendance Report.xls"'

    wb = xlwt.Workbook(encoding='utf-8')
    excelfile = BytesIO()
    ws = wb.add_sheet('Employee Attendance') # this will make a sheet named Users Data
    # Sheet header, first row
    row_num = 0

    font_style = xlwt.XFStyle()
    font_style.font.bold = True
    font_style.name = 'Time New Roman'
  
    borders = xlwt.Borders()
    borders.left = xlwt.Borders.THICK
    borders.right = xlwt.Borders.THICK
    borders.top = xlwt.Borders.THICK
    borders.bottom = xlwt.Borders.THICK
    font_style.borders = borders

    ws.col(0).width = 6000
    ws.col(1).width = 5000
    ws.col(2).width = 5000
    ws.col(3).width = 5000
    ws.row(0).height = 500

    columns = ['EMP_NAME', 'DATE', 'IN_TIME', 'OUT_TIME']

    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = xlwt.Style.colour_map['sky_blue']
    font_style.pattern = pattern

    for col_num in range(len(columns)):  
        ws.write(row_num, col_num, columns[col_num], font_style) # at 0 row 0 column 
    
    font_style = xlwt.XFStyle()    
    font_style = xlwt.easyxf(num_format_str='YYYY/MM/DD HH:MM AM/PM')
    # Sheet body, remaining rows
    pattern = xlwt.Pattern()
    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
    pattern.pattern_fore_colour = 0x17
    font_style.pattern = pattern

    #current_datetime = datetime.now()
    today = date.today()
    #yesterday = today - timedelta(days = 1)
    rows = emp.objects.filter(date=today).values_list('emp_name', 'date', 'intime', 'outtime').all()
    for row in rows:
        row_num += 1
        for col_num in range(len(row)):
            ws.write(row_num, col_num, row[col_num],font_style)

    wb.save(excelfile)
    email = EmailMessage()
    email.subject = 'ATTENDANCE REPORT'
    email.body = 'This Report is Generated by daily basis'
    email.from_email = 'ramajayambot@gmail.com'
    email.to = ['accounts@ramajayam.in','pavithra@ramajayam.in','suryariya45@gmail.com']
    email.attach('Attendance Report.xls', excelfile.getvalue(), 'application/ms-excel')
    email.send()

@login_required
def gstmaster(request):
    if request.method == "POST":
        form = TaskForm2(request.POST or None)
        if form.is_valid():
            form.save() 
    return render(request,'gstmaster.html')

@login_required
def empdetails(request):
    all0 = emp.objects.all()
    return render(request,'empdetails.html',{'all':all0})

@login_required
def emp1(request):
    all1 = emp.objects.filter(emp_name='RAMAJAYAM')
    return render(request,'emp1.html',{'all':all1})

@login_required
def emp2(request):
    all2 = emp.objects.filter(emp_name='ARUL MURUGAN')
    return render(request,'emp2.html',{'all':all2})

@login_required
def emp3(request):
    all3 = emp.objects.filter(emp_name='AKASH')
    return render(request,'emp3.html',{'all':all3})

@login_required
def emp4(request):
    all4 = emp.objects.filter(emp_name='KALAIARASI')
    return render(request,'emp4.html',{'all':all4})

@login_required
def emp5(request):
    all5 = emp.objects.filter(emp_name='HITHESH')
    return render(request,'emp5.html',{'all':all5})

@login_required
def emp6(request):
    all6 = emp.objects.filter(emp_name='SURYA')
    return render(request,'emp6.html',{'all':all6})

@login_required
def dailywork1(request):
    if request.method == "POST":
        emp_name = request.POST['emp_name']
        client = request.POST['client']
        description = request.POST['description']
        date = request.POST['date']
        work_from = request.POST['work_from']
        work_to = request.POST['work_to']
        file = request.FILES.get('file')
        Work = work(emp_name=emp_name,date=date,work_from=work_from,work_to=work_to,client=client,description=description,file=file)
        Work.save()
        return redirect('dailywork1')
    else: 
        return render(request,'work1.html')     

@login_required
def dailywork2(request):
    if request.method == "POST":
        emp_name = request.POST['emp_name']
        client = request.POST['client']
        description = request.POST['description']
        date = request.POST['date']
        work_from = request.POST['work_from']
        work_to = request.POST['work_to']
        file = request.FILES.get('file')
        Work = work(emp_name=emp_name,date=date,work_from=work_from,work_to=work_to,client=client,description=description,file=file)
        Work.save()      
        return redirect('dailywork2')   
    else:                   
        return render(request,'work2.html')

@login_required                                                                                                     
def dailywork3(request):                                                         
    if request.method == "POST":      
        emp_name = request.POST['emp_name']                          
        client = request.POST['client']
        description = request.POST['description']
        date = request.POST['date']
        work_from = request.POST['work_from']
        work_to = request.POST['work_to']
        file = request.FILES.get('file')
        Work = work(emp_name=emp_name,date=date,work_from=work_from,work_to=work_to,client=client,description=description,file=file)
        Work.save()
        return redirect('dailywork3')
    else:
        return render(request,'work3.html')

@login_required
def dailywork4(request):
    if request.method == "POST":
        emp_name = request.POST['emp_name']
        client = request.POST['client']
        description = request.POST['description']
        date = request.POST['date']
        work_from = request.POST['work_from']
        work_to = request.POST['work_to']
        file = request.FILES.get('file')
        Work = work(emp_name=emp_name,date=date,work_from=work_from,work_to=work_to,client=client,description=description,file=file)
        Work.save()
        return redirect('dailywork4')
    else:
        return render(request,'work4.html')

@login_required
def dailywork5(request):
    if request.method == "POST":
        emp_name = request.POST['emp_name']
        client = request.POST['client']
        description = request.POST['description']
        date = request.POST['date']
        work_from = request.POST['work_from']
        work_to = request.POST['work_to']
        file = request.FILES.get('file')
        Work = work(emp_name=emp_name,date=date,work_from=work_from,work_to=work_to,client=client,description=description,file=file)
        Work.save()
        return redirect('dailywork5')
    else:
        return render(request,'work5.html')

@login_required
def dailyworkreport(request):
    report1 = work.objects.order_by('-date','-work_from').all()
    #report2 = work.objects.filter(emp_name = 'Kalai').order_by('-date','-work_from')
    #report3 = work.objects.filter(emp_name = 'Hithesh').order_by('-date','-work_from')
    #report4 = work.objects.filter(emp_name = 'Surya').order_by('-date','-work_from')
    #report5 = work.objects.filter(emp_name = 'Arul Murugan').order_by('-date','-work_from')
    return render(request,'dailyworkreport.html',{'attern1':report1})
    
@login_required
def edit_task(request, task_id):
        if request.method == "POST" and 'update' in request.POST: 
            updatedate=request.POST['updatedate']
            time_from=request.POST['time_from']
            time_to=request.POST['time_to']
            messagelogs=request.POST['messagelogs']
            old_id=Tasklist.objects.get(id=task_id)
            file = request.FILES.get('file')
            test_list = edit_page(file=file,old_id=old_id,updatedate=updatedate,time_from=time_from,time_to=time_to,messagelogs=messagelogs)
            test_list.save()
            
            task = Tasklist.objects.get(pk=task_id)
            form = TaskForm(request.POST or None, instance = task)
            if form.is_valid(): 
                form.save()

                Work = task.task
                Client = task.clientname
                Assignee = task.assignee
                Status = task.status
                
            if Assignee ==  ("Ramajayam"):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                requests.get(http_req)

            elif Assignee ==  ('Surya'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been updated. Update the log regularly. Regards Ramajayam and Associates&mnumber=9345620789&entityid=1701159720921220642&templateid=1707164508742783037&smstype=Trans"
                requests.get(http_req)
                
                if Status == ('Finished'):
                    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                    requests.get(http_req)
            
            elif Assignee ==  ('Arul Murugan'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been updated. Update the log regularly. Regards Ramajayam and Associates&mnumber=9962138673&entityid=1701159720921220642&templateid=1707164508742783037&smstype=Trans"
                
                requests.get(http_req)
                if Status == ('Finished'):
                    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                    requests.get(http_req)
            
            elif Assignee ==  ('Akash'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been updated. Update the log regularly. Regards Ramajayam and Associates&mnumber=6379220399&entityid=1701159720921220642&templateid=1707164508742783037&smstype=Trans"
                
                requests.get(http_req)
                if Status == ('Finished'):
                    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                    requests.get(http_req)
             
            elif Assignee ==  ('Pavithra'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been updated. Update the log regularly. Regards Ramajayam and Associates&mnumber=9600190835&entityid=1701159720921220642&templateid=1707164508742783037&smstype=Trans"
                
                requests.get(http_req)
                if Status == ('Finished'):
                    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                    requests.get(http_req)
                
            elif Assignee ==  ('Hithesh'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been updated. Update the log regularly. Regards Ramajayam and Associates&mnumber=7904376087&entityid=1701159720921220642&templateid=1707164508742783037&smstype=Trans"
                
                requests.get(http_req)
                if Status == ('Finished'):
                    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                    requests.get(http_req)
                
            elif Assignee ==  ('Kalai'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been updated. Update the log regularly. Regards Ramajayam and Associates&mnumber=7338758831&entityid=1701159720921220642&templateid=1707164508742783037&smstype=Trans"
                
                requests.get(http_req)
                if Status == ('Finished'):
                    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                    requests.get(http_req)
            else:
                print ("sms not sent")

            messages.success(request,("Task Updated Successfully!!!")) 
            #return redirect('email_updatetask', (task_id))
            return  redirect('todolist')

        if request.method == "POST" and 'reminder' in request.POST:
            task = Tasklist.objects.get(pk=task_id)
            Client = task.clientname
            Assignee = task.assignee
            Work = task.task

            if Assignee ==  ('Akash'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=6379220399&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)

            elif Assignee ==  ('Akash'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=6379220399&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)

            elif Assignee ==  ('Ramajayam'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)
               
            elif Assignee ==  ('Arul Murugan'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=9962138673&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)

            elif Assignee ==  ('Surya'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ",The task " + Work + " of M/s " + Client + " has been marked urgent.Please complete soon.For more details please log on to https://app.ramajayam.in.Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707164061016770362&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=9345620789&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)

            elif Assignee ==  ('Pavithra'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=9600190835&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)
    
            elif Assignee ==  ('Kalai'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=7338758831&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)
                
            elif Assignee ==  ('Hithesh'):
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for " +  Client + " for " + Work + " has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9884468111&entityid=1701159720921220642&templateid=1707161911583298075&smstype=Trans"
                http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear " + Assignee + ", The task " +  Work + " of M/S " + Client + " has been marked urgent. Please complete soon. Regards Ramajayam and Associates&mnumber=7904376087&entityid=1701159720921220642&templateid=1707164508750367634&smstype=Trans"
                
                requests.get(http_req)
               
            else:
                print ("sms not sent")

            messages.success(request,("Sent Reminder!!!")) 
            #return redirect('email_remindertask', (task_id))   
            return  redirect('todolist')

        #if request.method == "POST" and 'change' in request.POST:
        #    task = Tasklist.objects.get(pk=task_id)
        #    Status = task.status

        #    if Status != ('Finished'):
        #        pass

        #    return redirect('edit_task')
            

        else:
            #log = files.objects.filter(number=task_id)
            logger = edit_page.objects.filter(old_id=task_id).order_by('-updatedate','-time_to')
            task_obj = Tasklist.objects.get(pk=task_id)
            return render(request, 'edit.html', {'task_obj': task_obj,'logs':logger})  

@login_required
def view_task(request, task_id):
          task_obj = Tasklist.objects.get(pk=task_id)
          return render(request, 'viewlogs.html', {'task_obj': task_obj})

@login_required
def complete_task(request):

          all_tasks = Tasklist.objects.all()
          all_tasks_sorted = Tasklist.objects.filter(fstatus=True).order_by('fstatus','-id')
          return render(request, 'complete.html', {'all_tasks': all_tasks_sorted})

@login_required
def finish1_task(request, task_id):
          task = Tasklist.objects.get(pk=task_id)
          task.fstatus = True
          task.status = "Finished - App"
          task.save()
          messages.success(request,("Task marked as Complete"))
          return  redirect('finish_task')

@login_required
def finish_task(request):
    all_tasks = Tasklist.objects.all()
    all_tasks_sorted = Tasklist.objects.filter(status="Finished").order_by('fstatus','-id')
    return render(request, 'finish.html', {'all_tasks': all_tasks_sorted})

def index(request):
    return  redirect('todolist')

def sms(request):
    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for Test_Client has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9600190835&entityid=1701159720921220642&templateid=  1707161911583298075&smstype=Trans"
    requests.get(http_req)
    return redirect('todolist')

def sms_with_name(request, Client_name):
    http_req = "https://app.sollu.in/api/transactional_sms?apikey=3A93C4F42D2B9EFE8823EAB85EC&message=Dear Team, New Task for "
    http_req2 =  "has been added to your Worklist. Regards Ramajayam and Associates&mnumber=9600190835&entityid=1701159720921220642&templateid=  1707161911583298075&smstype=Trans"
    requests.get(http_req + Client_name + http_req2)
    return redirect('todolist')

def success(request):
     return  render(request, 'success.html')

def email(request):
    subject = ('New Task added' 's')
    message = ' Please check http://ramajayampro.pythonanywhere.com/todolist/ '
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['accounts@ramajayam.in',]
    send_mail( subject, message, email_from, recipient_list )
    return redirect('success')

def email1(request, task_id):
    task = Tasklist.objects.get(pk=task_id)
    subject = 'New Task added to '  + task.assignee
    message = '\nClient Name = ' + task.clientname + '\nTask  ' + task.task +  '\nAssigned to ' + task.assignee  + ' \n\nPlease check the task  https://app.ramajayam.in/todolist// \n' + 'Regards\n\nBot126\n\nRamajayam and Associates dafdg'
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['accounts@ramajayam.in',]
    send_mail( subject, message, email_from, recipient_list )
    return redirect('todolist')

def email_updatetask(request, id):
    task = Tasklist.objects.get(pk=id)
    subject = 'Task Updated for '  + task.assignee
    message = '\nClient Name = ' + task.clientname + '\nTask = ' + task.task +  '\nAssigned to ' + task.assignee  + ' \n\nPlease check the task  http://ramajayampro.pythonanywhere.com/todolist/ \n' + 'Regards\n\nBot126\n\nRamajayam and Associates'
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['accounts@ramajayam.in',]
    send_mail( subject, message, email_from, recipient_list )
    return redirect('todolist')

def email_remindertask(request, id):
    task = Tasklist.objects.get(pk=id)
    subject = 'Task Reminder for '  + task.assignee
    message = '\nClient Name = ' + task.clientname + '\nTask = ' + task.task +  '\nAssigned to ' + task.assignee  + ' \n\nPlease check the task  http://ramajayampro.pythonanywhere.com/todolist/ \n' + 'Regards\n\nBot126\n\nRamajayam and Associates'
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['accounts@ramajayam.in',]
    send_mail( subject, message, email_from, recipient_list )
    return redirect('todolist')

def export(request):
     response = HttpResponse(content_type='text/csv')
     writer = csv.writer(response)
     writer.writerow(['client Name', 'task'])
     for Tasklists in Tasklist.objects.all().values_list('clientname','task'):
          writer.writerow(Tasklists)
     response['Content-Disposition'] = 'attachment; filename="Tasklist.csv" '
     return(response)

from datetime import date, datetime
from datetime import timedelta
from openpyxl import Workbook

def export2(request):
    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    )
    response['Content-Disposition'] = 'attachment; filename={date}-movies.xlsx'.format(
        date=datetime.now().strftime('%Y-%m-%d'),
    )
    workbook = Workbook()

    # Get active worksheet/tab
    worksheet = workbook.active
    worksheet.title = 'Movies'

    # Define the titles for columns
    columns = [
        'ID',
        'Title',
        'Description',
        'Length',
        'Rating',
        'Price',
    ]
    row_num = 1

    # Assign the titles for each cell of the header
    for col_num, column_title in enumerate(columns, 1):
        cell = worksheet.cell(row=row_num, column=col_num)
        cell.value = column_title

    # Iterate through all movies
    workbook.save(response)
    return response
